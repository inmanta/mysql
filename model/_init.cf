"""
    Copyright 2017 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import exec
import ip
import ip::services

entity DBMS:
    """
        A DB management system (a service on a machina, DBaaS, ...)

        :attr hostref: reference to host, e.g. ip or hostname
    """
    string hostref
    ip::port port=3306
end

entity ManagedMysql extends DBMS:
    string user
    string password
end

ManagedMysql.agenthost [1] -- ip::Host

entity MysqlServer extends ip::services::Server, DBMS:
    """
        Mysql server configuration
    """
end

entity Database:
    string name
    string user
    string password
    string encoding = "utf8"
    string collation = "utf8-ci"
end

implementation dBDependsOnServer for Database:
    #DB creation script is in Server
    server.provides = self.provides
end

implement Database using dBDependsOnServer

DBMS server [1] -- [0:] Database databases

typedef Server as MysqlServer(services=mysql::s_server)

mysql_server_range=ip::Port(low=3306)
s_server=ip::DstService(proto="tcp", dst_range=mysql_server_range)

implementation manageManaged for ManagedMysql:
    tools = std::Package(host=agenthost, name="mysql", state="installed")
    for db in databases:
        exec::Run(host=agenthost, command="/usr/bin/mysql -u {{user}} -h {{hostref}} --password={{password}} -s -e \"create database IF NOT EXISTS {{db.name}} CHARACTER SET {{db.encoding}} COLLATE {{db.collation}}; grant all privileges on {{db.name}}.* to '{{db.user}}'@'%' identified by '{{db.password}}'; grant all privileges on {{db.name}}.* to '{{db.user}}'@'localhost' identified by '{{db.password}}';\" >/dev/null", requires=tools)
    end
end

implement ManagedMysql using manageManaged


implement MysqlServer using mysqlRedhat, sysvCreate when std::familyof(host.os, "rhel") and host.os.version <= 6
implement MysqlServer using mysqlMariaDB when (std::familyof(host.os, "rhel") and host.os.version >= 7) or std::familyof(host.os, "fedora")
implement MysqlServer using ubuntuMysql when std::familyof(host.os, "ubuntu")

implementation mysqlRedhat for MysqlServer:
    # install mysql server
    pkg = std::Package(host=host, name="mysql-server", state="installed")
    svc = std::Service(host=host, name="mysqld", state="running", onboot=true)
    svc.requires = [pkg, config, conf_dir]

    config = std::ConfigFile(host=host, path="/etc/my.cnf", content=std::template("mysql/my.cnf.tmpl"), requires=pkg, reload=true)
    conf_dir = std::Directory(host=host, path="/etc/mysql.conf.d", owner="root", group="root", mode=755)

    dblist = std::ConfigFile(host=host, path="/etc/sysconfig/mysql", reload=true,
                             content=std::template("mysql/databases.tmpl"))
                             
   self.hostref = host.ip
   self.port = 3306
end

implementation mysqlMariaDB for MysqlServer:
    # install mysql server
    pkg = std::Package(host=host, name="mariadb-server", state="installed")
    svc = std::Service(host=host, name="mariadb", state="running", onboot=true)
    svc.requires = [pkg, config, conf_dir]

    config = std::ConfigFile(host=host, path="/etc/my.cnf", content=std::template("mysql/mariadb.cnf.tmpl"), requires=pkg, reload=true)
    conf_dir = std::Directory(host=host, path="/etc/my.cnf.d", owner="root", group="root", mode=755)

    dblist = std::ConfigFile(host=host, path="/etc/sysconfig/mysql", reload=true,
                             content=std::template("mysql/databases.tmpl"))

    script_file = std::File(host=host, path="/usr/bin/mysql_create_db", owner="root", group="root",
                            mode=755, content=std::file("mysql/redhat_mysql_create_db"))

    exec = exec::Run(host=host, command="/usr/bin/mysql_create_db", requires=[dblist, script_file, svc])
    exec.provides = self.provides
   self.hostref = host.ip
   self.port = 3306
end

implementation sysvCreate for MysqlServer:
    mysqld_config = std::ConfigFile(host=host, path="/etc/sysconfig/mysqld", content=std::file("mysql/mysqld_sysconfig"))
    script_file = std::File(host=host, path="/usr/bin/mysql_create_db", owner="root", group="root",
                            mode=755, content=std::file("mysql/redhat_mysql_create_db"))
end

implementation ubuntuMysql for MysqlServer:
    # install mysql server
    pkg = std::Package(host=host, name="mysql-server", state="installed")
    svc = std::Service(host=host, name="mysql", state="running", onboot=true)
    svc.requires = [pkg, config, conf_dir]

    config = std::ConfigFile(host=host, path="/etc/mysql/my.cnf", content=std::template("mysql/my.cnf.ubuntu.tmpl"),
                             requires=pkg, reload=true)
    conf_dir = std::Directory(host=host, path="/etc/mysql/conf.d", owner="root", group="root", mode=755)

    dblist = std::ConfigFile(host=host, path="/etc/mysql/databases", reload=true, requires=pkg,
                             content = std::template("mysql/databases.tmpl"))

    script_file = std::File(host=host, path="/usr/bin/mysql_create_db", owner="root", group="root",
                            mode=755, content=std::file("mysql/ubuntu_mysql_create_db"))

    exec = exec::Run(host=host, command="/usr/bin/mysql_create_db", requires=[dblist, script_file], reload_only=true)
    exec.provides = self.provides
    self.hostref = host.ip
    self.port = 3306
end